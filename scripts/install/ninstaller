#!/usr/bin/python3
# encoding: utf-8
"""
This program allows and operator to install the controller os.
"""
import os
import yaml
import hmac
import tarfile
import npyscreen
from Crypto.Cipher import AES
import requests
import subprocess
import click
import base64

MENEJA_URL = "https://meneja.gig.tech"


class App(npyscreen.NPSApp):
    def __init__(self, configpath, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.configpath = configpath
        self.config = None
        self.action = None
        self.jwt = None
        self.controller = None
        self.env = None
        self.action = None
        self.org = None
        self.image = None
        self.clustercommand = None

    def main(self):
        if self.configpath is None:
            self.authorize()
        else:
            with open(self.configpath) as fd:
                self.config = yaml.load(fd)
            self.select_installation()

    def authorize(self):
        # Authorize
        form = npyscreen.ActionForm(name="GIG.tech controller installer - authenticate")
        form.add(
            npyscreen.Pager,
            values=[
                "To use this program you need to have the Meneja",
                "authentication key on the system.",
                "Select the Meneja authorization key file",
                "alternatively you can enter the keycode",
                "and enter your password you set when you downloaded",
                "your authentication keyfile from https://meneja.gig.tech",
            ],
            max_height=6,
        )
        keyfile = form.add(
            npyscreen.TitleFilenameCombo, name="Select Meneja auth key file:"
        )
        b85code = form.add(npyscreen.TitleText, name="Enter keycode:")
        password = form.add(
            npyscreen.TitlePassword, name="Enter auth key file password:"
        )
        errormessage = form.add(npyscreen.FixedText, color="DANGER")

        def cancel():
            return

        def ok():
            if not keyfile.value and not b85code.value:
                errormessage.value = "Auth key file or key ccode needs to be set!"
                form.editw = 2
                form.edit()
                return
            if not password.value:
                errormessage.value = "Password not set!"
                form.editw = 3
                form.edit()
                return
            # Parse input
            if keyfile.value:
                with open(keyfile.value, "rb") as f:
                    payload = f.read()
            else:
                payload = base64.b85decode(b85code.value)

            def pad(s):
                return s.ljust(len(s) + 16 - len(s) % 16)

            pwd = pad(password.value.encode("utf8"))
            # Validate password
            signature = payload[:16]
            encrypted_jwt = payload[16:]
            if hmac.new(pwd, encrypted_jwt).digest() != signature:
                errormessage.value = "Password is not correct!"
                form.editw = 3
                form.edit()
                return
            # Decrypt jwt
            cipher = AES.new(pwd, AES.MODE_ECB)
            jwt = cipher.decrypt(encrypted_jwt).strip().decode("utf8")
            # Refresh jwt
            response = requests.get(
                "https://itsyou.online/v1/oauth/jwt/refresh",
                headers={"Authorization": "bearer %s" % jwt},
            )
            response.raise_for_status()
            self.jwt = response.text
            # Downloading environments
            response = requests.get(
                "%s/environments" % MENEJA_URL,
                headers={"Authorization": "bearer %s" % self.jwt},
            )
            response.raise_for_status()
            environments = response.json()
            self.select_environment(environments)

        form.on_cancel = cancel
        form.on_ok = ok
        form.edit()

    def select_environment(self, environments):
        treedata = npyscreen.NPSTreeData(
            content="Root", selectable=False, ignoreRoot=True
        )
        for org, envs in environments.items():
            org_node = treedata.newChild(content=org, selectable=False, selected=False)
            for env in envs:
                org_node.newChild(content=env, selectable=True, selected=False)
        form = npyscreen.ActionForm(
            name="GIG.tech controller installer - select environment node"
        )
        envtree = form.add(
            npyscreen.MLTree,
            name="Select the environment you whish to install in :",
            values=treedata,
            max_height=10,
        )
        errormessage = form.add(npyscreen.FixedText, color="DANGER")

        def cancel():
            return

        def ok():
            if (
                not envtree.value
                or envtree.values[envtree.value].getParent().getParent() is None
            ):
                errormessage.value = (
                    "Please select the G8 environment you are installing in:"
                )
                form.edit()
                return
            errormessage.value = ""
            self.org = envtree.values[envtree.value].getParent().content
            self.env = envtree.values[envtree.value].content
            response = requests.get(
                "%s/environment/%s/%s/config" % (MENEJA_URL, self.org, self.env),
                headers={"Authorization": "bearer %s" % self.jwt},
                stream=True,
            )
            response.raise_for_status()
            config = response.json()
            self.config = config
            if not os.path.exists("/root/etc"):
                os.mkdir("/root/etc")
            self.configpath = "/root/etc/system-config.yaml"
            with open(self.configpath, "w+") as system_fd:
                yaml.dump(config, system_fd)
            self.select_installation()

        form.on_cancel = cancel
        form.on_ok = ok
        form.edit()

    def select_installation(self):
        form = npyscreen.ActionForm(name="Select Installation Type")
        form.add(npyscreen.Pager, values=["Select an installation type"], max_height=5)
        installation_type = form.add(
            npyscreen.TitleSelectOne,
            name="Select the type of installation to preform",
            values=["node", "cluster", "image", "controller"],
            selectable=True,
            scroll_exit=True,
            max_height=5,
        )
        errormessage = form.add(npyscreen.FixedText, color="DANGER")

        def cancel():
            return

        def ok():
            marked_installation_type = installation_type.get_selected_objects()
            if not marked_installation_type:
                errormessage.value = "Please select an installation type."
                form.edit()
                return
            errormessage.value = ""
            # invoke install
            self.action = marked_installation_type[0]
            if self.action == "cluster":
                self.cluster_selection()
            if self.action == "controller":
                self.controller_selection()
            if self.action == "node":
                self.node_selection()
            if self.action == "image":
                self.image_selection()

        form.on_cancel = cancel
        form.on_ok = ok
        form.edit()

    def cluster_selection(self):
        form = npyscreen.ActionForm(name="Select Cluster Command")
        form.add(npyscreen.Pager, values=["Select a cluster command"], max_height=5)
        clustercommand = form.add(
            npyscreen.TitleSelectOne,
            name="Select cluster command",
            values=["deploy", "update", "upgrade"],
            selectable=True,
            scroll_exit=True,
            max_height=5,
        )
        errormessage = form.add(npyscreen.FixedText, color="DANGER")

        def cancel():
            return

        def ok():
            markedcommand = clustercommand.get_selected_objects()
            if not markedcommand:
                errormessage.value = "Please select a cluster command."
                form.edit()
                return
            errormessage.value = ""
            # invoke install
            self.clustercommand = markedcommand[0]
            self.confirm_cluster_command()

        form.on_cancel = cancel
        form.on_ok = ok
        form.edit()

    def confirm_cluster_command(self):
        form = npyscreen.ActionPopup(name="GIG.tech cluster command - confirm")
        form.add(
            npyscreen.Pager,
            values=[
                "Please confirm cluster command:",
                "  partner: %s" % self.org,
                "  environment: %s" % self.env,
                "  command: cluster %s" % self.clustercommand,
            ],
            max_height=5,
        )

        def cancel():
            self.cluster_selection()

        def ok():
            return

        form.on_cancel = cancel
        form.on_ok = ok
        form.edit()

    def controller_selection(self):
        form = npyscreen.ActionForm(
            name="GIG.tech controller installer - Controller installation."
        )
        form.add(
            npyscreen.Pager,
            values=["Select the controller node you whish to install."],
            max_height=3,
        )
        node = form.add(
            npyscreen.TitleSelectOne,
            max_height=5,
            value=[],
            name="Select controller",
            values=["controller 1", "controller 2", "controller 3"],
            scroll_exit=True,
        )
        errormessage = form.add(npyscreen.FixedText, color="DANGER")

        def cancel():
            return

        def ok():
            if not node.value:
                errormessage.value = "Please select the controller you are installing"
                form.edit()
                return
            errormessage.value = ""
            controller = node.value[0] + 1
            self.confirm_controller_popup(controller)

        form.on_cancel = cancel
        form.on_ok = ok
        form.edit()

    def confirm_controller_popup(self, controller):
        form = npyscreen.ActionPopup(
            name="GIG.tech controller installer - confirm installation"
        )
        form.add(
            npyscreen.Pager,
            values=[
                "Please confirm installation settings:",
                "  partner: %s" % self.org,
                "  environment: %s" % self.env,
                "  controller node: %s" % controller,
            ],
            max_height=5,
        )

        def cancel():
            self.controller_selection()

        def ok():
            response = requests.get(
                "%s/download/controller/config/%s/%s"
                % (MENEJA_URL, self.org, self.env),
                headers={"Authorization": "bearer %s" % self.jwt},
                stream=True,
            )
            response.raise_for_status()
            with open("/tmp/config.tar", "wb") as f:
                for chunk in response.iter_content(chunk_size=1024):
                    if chunk:  # filter out keep-alive new chunks
                        f.write(chunk)
            if not os.path.exists("/root/etc"):
                os.mkdir("/root/etc")
            with tarfile.open("/tmp/config.tar") as f:
                f.extractall("/root/etc")
            # invoke install
            self.controller = controller
            os.system("/root/tools/CtrlInstall %s" % self.controller)

        form.on_cancel = cancel
        form.on_ok = ok
        form.edit()

    def image_selection(self):
        form = npyscreen.ActionForm(
            name="GIG.tech controller installer - Image installation"
        )
        image = form.add(npyscreen.TitleText, name="Enter Image template name:")
        errormessage = form.add(npyscreen.FixedText, color="DANGER")

        def cancel():
            return

        def ok():
            if not image:
                errormessage.value = "Please Image template name."
                form.edit()
                return
            errormessage.value = ""
            # invoke install
            self.image = image.get_value()
            self.confirm_image_popup()

        form.on_cancel = cancel
        form.on_ok = ok
        form.edit()

    def confirm_image_popup(self):
        form = npyscreen.ActionPopup(
            name="GIG.tech controller installer - confirm installation"
        )
        form.add(
            npyscreen.Pager,
            values=[
                "Please confirm installation settings:",
                "  partner: %s" % self.org,
                "  environment: %s" % self.env,
                "  installing image: %s" % self.image,
            ],
            max_height=5,
        )

        def cancel():
            self.image_selection()

        def ok():
            pass

        form.on_cancel = cancel
        form.on_ok = ok
        form.edit()


@click.command("Ncursers installer")
@click.option("--config", help="Config file to deploy the cluster", envvar="ENV_CONFIG")
@click.option(
    "--version", help="Version to install(e.g., 2.4.4)", envvar="ENV_OVC_VERSION"
)
@click.option(
    "--url", help="version url to install from", envvar="OVC_VERSION_URL", default=None
)
def cli(config, version, url):
    app = App(config)
    try:
        app.run()
        processes = []
        logs = "/var/log/"
        os.makedirs(logs, exist_ok=True)
        if app.action == "cluster":
            command = [
                "python3",
                "/opt/code/github/0-complexity/openvcloud_installer/scripts/install/installer",
                "--config={}".format(app.configpath),
            ]
            if url:
                command.append("--url={}".format(url))
            if version:
                command.append("--version={}".format(version))
            command.extend([
                "cluster",
                app.clustercommand,
            ])
            processes.append(
                (
                    subprocess.Popen(command),
                    "cluster {}".format(app.clustercommand),
                    None,
                )
            )
        if app.action == "controller":
            fd = open("/var/log/nodes/controller_%s.log" % app.controller, "w+")
            processes.append(
                (
                    subprocess.Popen(
                        ["/root/tools/CtrlInstall", app.controller],
                        stdout=fd,
                        stderr=fd,
                    ),
                    app.controller,
                    fd,
                )
            )
            fd = open("/var/log/nodes/controller_%s.log" % app.controller, "w+")
            processes.append(
                (
                    subprocess.Popen(
                        ["/root/tools/CtrlInstall", app.controller],
                        stdout=fd,
                        stderr=fd,
                    ),
                    app.controller,
                    fd,
                )
            )
        if app.action == "image":
            fd = open("%s/image_%s.log" % (logs, app.image), "w+")
            processes.append(
                (
                    subprocess.Popen(
                        [
                            "python3",
                            "/opt/code/github/0-complexity/openvcloud_installer/scripts/install/installer",
                            "--config={}".format(app.configpath),
                            "--version={}".format(version),
                            "image",
                            "deploy",
                            "--name=%s" % app.image,
                        ],
                        stdout=fd,
                        stderr=fd,
                    ),
                    app.image,
                    fd,
                )
            )
        for process in processes:
            print("[+] Installing %s" % process[1])
            if process[0].wait() != 0:
                if process[2]:
                    print("Error: an error occured check under /var/log/%s/" % app.env)
            if process[2]:
                process[2].close()

    except KeyboardInterrupt:
        print("Keyboard interrupt")


if __name__ == "__main__":
    cli()
